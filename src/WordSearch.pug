script.
    // WordSearch.pug
    import { mainWord } from "./stores.js"
    import { Util } from "./Util.js"

    const QUID = {
        "SYN": {
            id: "synonym",
            qParam: "rel_syn",
            label: "Synonym"
        },

        "ANT": {
            id: "anthonym",
            qParam: "rel_ant",
            label: "Anthonym" 
        },

        "KOF": {
            id: "kind_of",
            qParam: "rel_spc",
            label: "Kind of ..."
        },

        "TRI": {
            id: "trigger",
            qParam: "rel_trg",
            label: "Trigger"
        }
    }

    const findObjectElById = (arr, id) => Object.entries(arr).filter((el) => {return el[1].id==id})[0][1]

    const findSearchTypeById = (id) => findObjectElById(QUID, id)

    let searchTypes = [ QUID.SYN.id, QUID.ANT.id, QUID.KOF.id, QUID.TRI.id ]
    let wordsStr = ""
    let wordsArr = []
    let phrasesObjs = {
        "synonym": [],
        "anthonym": [],
        "kind_of": [],
        "trigger": []
    }

    let toggles = {
        "synonym": true,
        "anthonym": true,
        "kind_of": true,
        "trigger": true
    }

    const getResults = (qParam, word) => {
        return new Promise((resolve, reject) => {
            window.$.ajax({
                url: `https://api.datamuse.com/words?${qParam}=${word}`,
                type: "GET",
                success: (data) => resolve(data),
                error: (data) => reject(data)
            })
        })
    }

    const search = () => {
        if(wordsStr) {
            wordsArr = wordsStr.split(",").slice(0,3).map(el => el.trim())
            
            if( wordsArr.length ) {
                // setting the first word to be the mainWord
                $mainWord = wordsArr[0]
                PubSub.publish("mainWordChange", {mainWord: wordsArr[0]})

                searchTypes.map(el => { 
                    let typeObj = findSearchTypeById(el)

                    phrasesObjs[typeObj.id] = []

                    for(let i=0; i<wordsArr.length; i++) {
                        let word = wordsArr[i].toLowerCase()

                        getResults(typeObj.qParam, word).then((data) => {
                            phrasesObjs[typeObj.id].push({
                                word: word,
                                results: data.map((resEl) => resEl["word"])
                            })

                            phrasesObjs = phrasesObjs
                        })
                    }
                })
            }
        }

    }

    const toggleMe = (toggleId) => toggles[toggleId] = !toggles[toggleId]

    const updatePhrases = (e) => wordsStr = e.target.value

    const getWordScore = (word) => {
        let score = 0
        
        searchTypes.map(type => {
            phrasesObjs[type].map(el => {
                if(el.results.indexOf(word) > -1) score++
            })
        })
        
        return score
    }

    const getWordScoreLabel = (word) => {
        switch(getWordScore(word)) {
            case 0:
            case 1:
                return "low"
            case 2:
                return "medium"
            case 3:
            default:
                return "high"
        }
    }

section.word-search
    form
        .row
            .col-lg-10.col-md-8
                input(type="text" 
                  class="form-control input-lg" 
                  placeholder="Type up to 3 words separated by commas"
                  "on:keyup"="{updatePhrases}" 
                  value="{wordsStr}")
            .col-md-2
                button(class="btn btn-primary btn-lg btn-block" "on:click|preventDefault"="{ search }") Search
    
    hr

    {#if wordsArr.length}
      {#each searchTypes as searchType} 
        fieldset 
              label(for="{searchType}") {findSearchTypeById(searchType).label} 
                  span("on:click|preventDefault"="{function(){ toggleMe(searchType)}}") [{toggles[searchType]?"x":"+"}]
              {#if toggles[searchType]}
                .jumbotron 
                  table.table 
                      {#each phrasesObjs[searchType] as phrase}
                        {#if wordsArr.length>1}
                          tr.hidden-md.hidden-lg
                                td(colspan=2, align="center")
                                    strong {phrase.word}
                        tr
                              {#if wordsArr.length>1}
                                td.hidden-sm.hidden-xs
                                    strong {phrase.word} 
                              td
                                {#each phrase.results as word}
                                  span(class="score_{getWordScoreLabel(word)}") {word}
                                        //- sup(class="{getWordScore(word)}") {getWordScore(word)} 

style.
    fieldset label {
        text-transform: uppercase;
    }

    fieldset label span {
        cursor: pointer;
    }

    .table td span {
        display: inline-block;
        background-color: #fff;
        margin: 5px 5px 0 0;
        padding: 2px 5px;
    }

    .table td span.score_medium {
        background-color: #fff9c4;
    }

    .table td span.score_high {
        background-color: #b4ffb3;
    }
    

    